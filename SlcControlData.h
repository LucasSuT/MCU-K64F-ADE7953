/*
 * SLCData.h
 *
 *  Created on: 2017¦~11¤ë13¤é
 *      Author: Dennis
 */

#ifndef SLCDATA_H_
#define SLCDATA_H_

#define x_FEATURE_DALIADDRESS_GPSONCHIP     // enable or disbale extend spi package for multi-dali-address (and gps on microchip)

#ifdef _FEATURE_DALIADDRESS_GPSONCHIP
#define x_FEATURE_GPS_ON_MICROCHIP			// enable or disable gps on microchip
#endif

#define SLC_DATETIME_BASE_YEAR		(2015)


#define LIGHT_SCHEDULE_COUNT_MAX	(6)
#ifdef _FEATURE_DALIADDRESS_GPSONCHIP
#define LIGHT_ADDR_MAX				(64)
#else
#define LIGHT_ADDR_MAX				(1)
#endif

/**
 * First check byte
 */
#define SPI_FIRST_CHECK_BYTE		(0xFE)

/**
 * Last check byte
 */
#define SPI_LAST_CHECK_BYTE			(0x7F)

#define SPI_PAIR_MODE				0x01
#define SPI_LIGHT_SENSOR_MODE		0x00

// index of buffer from slave(stm32) to master(microchip)
#ifdef _FEATURE_DALIADDRESS_GPSONCHIP
enum
{
	IDX_SPISLAVE_FIRSTCHECK,		// 0
	IDX_SPISLAVE_DIM_BROADCAST,		// 1
	IDX_SPISLAVE_LIGHTPAIR,			// 2
	IDX_SPISLAVE_RESERVE1,			// 3
	IDX_SPISLAVE_RESERVE2,			// 4
	#ifdef _FEATURE_GPS_ON_MICROCHIP
	IDX_SPISLAVE_GPSDATAFORMAT,		// 5
	IDX_SPISLAVE_GPSPOWEREN,		// 6
	#endif
	IDX_SPISLAVE_DIM,				// 5 or 7
	IDX_SPISLAVE_LASTCHECK			= IDX_SPISLAVE_DIM + LIGHT_ADDR_MAX,	// 69 or 71

	SPISLAVE_MAX_LEN				// 70 or 72
};
#else
enum
{
	IDX_SPISLAVE_FIRSTCHECK,		// 0
	IDX_SPISLAVE_DIM,				// 1
	IDX_SPISLAVE_LIGHTPAIR,			// 2
	IDX_SPISLAVE_RESERVE1,			// 3
	IDX_SPISLAVE_RESERVE2,			// 4
	IDX_SPISLAVE_LASTCHECK,			// 5
	SPISLAVE_MAX_LEN				// 6
};
#endif

#ifdef _FEATURE_GPS_ON_MICROCHIP
// gps data buffer define
#define GPS_RECORD_COUNT			5
#define GPS_DATA_MAX				80//100

// gps nmea data format command index
enum
{
	GPS_FORMAT_RMC,
	GPS_FORMAT_GLL,
	GPS_FORMAT_GGA,
	GPS_FORMAT_VTG,
	GPS_FORMAT_GSA,
	GPS_FORMAT_GSV,
	GPS_FORMAT_MAX
};
#define GPS_SPECIFY_DEFAULT			GPS_FORMAT_RMC

// gps power on/off
enum
{
	GPS_POWERON,
	GPS_POWEROFF
};
#define GPS_POWER_DEFAULT			GPS_POWERON
#endif // #ifdef _FEATURE_GPS_ON_MICROCHIP

// index of buffer from master(microchip) to slave(stm32)
/*
#define INDEX_SPIMASTER_FIRST_CHECK_BYTE (0)
#define INDEX_SPIMASTER_VOLTAGE          (1)
#define INDEX_SPIMASTER_FREQ             (3)
#define INDEX_SPIMASTER_PWR_FACTOR       (5)
#define INDEX_SPIMASTER_CURRENT          (7)
#define INDEX_SPIMASTER_WATT             (11)
#define INDEX_SPIMASTER_TOTAL_WATT       (15)
#define INDEX_SPIMASTER_DIM_LEVEL        (23)
#define INDEX_SPIMASTER_LUX_LO           (24)
#define INDEX_SPIMASTER_LUX_HI           (25)
#define INDEX_SPIMASTER_SYSTEM           (26)
#define INDEX_SPIMASTER_RESERVED         (27)
#define INDEX_SPIMASTER_MCU_VER          (28)
#define INDEX_SPIMASTER_NODE_RSSI        (29)
#define INDEX_SPIMASTER_NODE_VER         (30)
#ifdef _FEATURE_GPS_ON_MICROCHIP
#define INDEX_SPIMASTER_GPS_DATA		 (31)
#define INDEX_SPIMASTER_LAST_CHECK_BYTE  (INDEX_SPIMASTER_GPS_DATA+GPS_DATA_MAX+1)
#else
#define INDEX_SPIMASTER_LAST_CHECK_BYTE  (31)
#endif
*/
#define INDEX_SPIMASTER_FIRST_CHECK_BYTE_LEN	(1)
#define INDEX_SPIMASTER_VOLTAGE_LEN				(2)
#define INDEX_SPIMASTER_FREQ_LEN				(2)
#define INDEX_SPIMASTER_PWR_FACTOR_LEN			(2)
#define INDEX_SPIMASTER_CURRENT_LEN				(4)
#define INDEX_SPIMASTER_WATT_LEN				(4)
#define INDEX_SPIMASTER_TOTAL_WATT_LEN			(8)
#define INDEX_SPIMASTER_DIM_LEVEL_LEN			LIGHT_ADDR_MAX //(1)
#define INDEX_SPIMASTER_LUX_LO_LEN				(1)
#define INDEX_SPIMASTER_LUX_HI_LEN				(1)
#define INDEX_SPIMASTER_SYSTEM_LEN				(1)
#define INDEX_SPIMASTER_RESERVED_LEN			(1)
#define INDEX_SPIMASTER_MCU_VER_LEN				(1)
#define INDEX_SPIMASTER_NODE_RSSI_LEN			(1)
#define INDEX_SPIMASTER_NODE_VER_LEN			(1)
#ifdef _FEATURE_GPS_ON_MICROCHIP
#define INDEX_SPIMASTER_GPS_DATA_LEN			(GPS_DATA_MAX)
#else
#define INDEX_SPIMASTER_GPS_DATA_LEN			(0)
#endif
#define INDEX_SPIMASTER_LAST_CHECK_BYTE_LEN		(1)

enum {
	INDEX_SPIMASTER_FIRST_CHECK_BYTE,	// 0
	INDEX_SPIMASTER_VOLTAGE				= INDEX_SPIMASTER_FIRST_CHECK_BYTE + INDEX_SPIMASTER_FIRST_CHECK_BYTE_LEN,	// 1
	INDEX_SPIMASTER_FREQ				= INDEX_SPIMASTER_VOLTAGE + INDEX_SPIMASTER_VOLTAGE_LEN,					// 3
	INDEX_SPIMASTER_PWR_FACTOR			= INDEX_SPIMASTER_FREQ + INDEX_SPIMASTER_FREQ_LEN,							// 5
	INDEX_SPIMASTER_CURRENT				= INDEX_SPIMASTER_PWR_FACTOR + INDEX_SPIMASTER_PWR_FACTOR_LEN,				// 7
	INDEX_SPIMASTER_WATT				= INDEX_SPIMASTER_CURRENT + INDEX_SPIMASTER_CURRENT_LEN,					// 11
	INDEX_SPIMASTER_TOTAL_WATT			= INDEX_SPIMASTER_WATT + INDEX_SPIMASTER_WATT_LEN,							// 15
	INDEX_SPIMASTER_DIM_LEVEL			= INDEX_SPIMASTER_TOTAL_WATT + INDEX_SPIMASTER_TOTAL_WATT_LEN,				// 23
	INDEX_SPIMASTER_LUX_LO				= INDEX_SPIMASTER_DIM_LEVEL + INDEX_SPIMASTER_DIM_LEVEL_LEN,				// 87 // 24
	INDEX_SPIMASTER_LUX_HI				= INDEX_SPIMASTER_LUX_LO + INDEX_SPIMASTER_LUX_LO_LEN,						// 88 // 25
	INDEX_SPIMASTER_SYSTEM				= INDEX_SPIMASTER_LUX_HI + INDEX_SPIMASTER_LUX_HI_LEN,						// 89 // 26
	INDEX_SPIMASTER_RESERVED			= INDEX_SPIMASTER_SYSTEM + INDEX_SPIMASTER_SYSTEM_LEN,						// 90 // 27
	INDEX_SPIMASTER_MCU_VER				= INDEX_SPIMASTER_RESERVED + INDEX_SPIMASTER_RESERVED_LEN,					// 91 // 28
	INDEX_SPIMASTER_NODE_RSSI			= INDEX_SPIMASTER_MCU_VER + INDEX_SPIMASTER_MCU_VER_LEN,					// 92 // 29
	INDEX_SPIMASTER_NODE_VER			= INDEX_SPIMASTER_NODE_RSSI + INDEX_SPIMASTER_NODE_RSSI_LEN,				// 93 // 30
	INDEX_SPIMASTER_GPS_DATA			= INDEX_SPIMASTER_NODE_VER + INDEX_SPIMASTER_NODE_VER_LEN,					// 94 // 31
	INDEX_SPIMASTER_LAST_CHECK_BYTE  	= INDEX_SPIMASTER_GPS_DATA + INDEX_SPIMASTER_GPS_DATA_LEN,					// 94 or 174 // 31 or 111

	SPIMASTER_MAX_LEN
};


#endif /* SLCDATA_H_ */
